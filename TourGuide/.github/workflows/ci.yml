name: CI/CD

on:
  pull_request:
    branches: [ main, master ]
  push:
    branches: [ main, master ]
    tags: [ 'v*', 'release/*' ]
  workflow_dispatch: {}

env:
  MAVEN_OPTS: -Xmx1024m

jobs:
  build-and-test:
    name: Build & Test (PRs and pushes)
    runs-on: ubuntu-latest
    outputs:
      artifact-path: ${{ steps.package.outputs.jar-path }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: maven

      - name: Cache Maven repository (fallback)
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Install local library artifacts (libs/*.jar)
        run: |
          mvn -B install:install-file -Dfile=libs/gpsUtil.jar -DgroupId=gpsUtil -DartifactId=gpsUtil -Dversion=1.0.0 -Dpackaging=jar || true
          mvn -B install:install-file -Dfile=libs/TripPricer.jar -DgroupId=tripPricer -DartifactId=tripPricer -Dversion=1.0.0 -Dpackaging=jar || true
          mvn -B install:install-file -Dfile=libs/RewardCentral.jar -DgroupId=rewardCentral -DartifactId=rewardCentral -Dversion=1.0.0 -Dpackaging=jar || true

      - name: Build & run unit tests
        id: mvn-test
        run: mvn -B -DskipTests=false -DskipITs=true verify --show-version --errors

      - name: Collect test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: surefire-reports
          path: target/surefire-reports/**

      - name: Run SpotBugs (report only)
        run: mvn -B com.github.spotbugs:spotbugs-maven-plugin:4.7.3.0:check || true

      - name: OWASP Dependency-Check (report only)
        run: mvn -B org.owasp:dependency-check-maven:check -Dformat=ALL || true

      - name: Package (create jar)
        id: package
        run: |
          mvn -B -DskipTests=true package
          echo "jar-path=target/$(ls target | grep -E '\\.(jar)$' | head -n1)" >> $GITHUB_OUTPUT

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: tourguide-artifact
          path: target/*.jar

  build-and-publish-image:
    name: Build & Publish Docker Image
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image
        id: build-image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/tourguide:latest
            ghcr.io/${{ github.repository_owner }}/tourguide:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Image scan with Trivy
        uses: aquasecurity/trivy-action@v1
        with:
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'
          scan-type: 'image'
          image-ref: ghcr.io/${{ github.repository_owner }}/tourguide:${{ github.sha }}

      - name: Create release (tag push)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-to-k8s:
    name: Deploy to Kubernetes (staging)
    runs-on: ubuntu-latest
    needs: build-and-publish-image
    if: env.KUBE_CONFIG != ''
    env:
      KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
      IMAGE: ghcr.io/${{ github.repository_owner }}/tourguide:${{ github.sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "$KUBE_CONFIG" > $HOME/.kube/config

      - name: Set image in deployment
        run: |
          kubectl set image deployment/tourguide tourguide=$IMAGE --record || true

      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/tourguide --timeout=2m || (kubectl describe deploy tourguide && kubectl get pods -o wide && exit 1)
